import java.util.*
import coordinacion.procesos.cori.documentos.*
import coordinacion.procesos.cori.encargos.*
import coordinacion.modulos.utilidades.*
import coordinacion.modulos.asistentes.*
import coordinacion.incidencias.*

package coordinacion.procesos.cori {

	["mjudelq"]
	definition Workmap is activity {
		label = "Coordinar incidencias";
		target = ref Expediente;
		role = ref coordinacion.RoleCoordinador;

		shortcut shIncidencia;
		shortcut shEncargoCI;
		shortcut shEncargoCV;
		shortcut shEncargoCA;
		shortcut shParteIncidenciaCorregida;

		
  		["mr_hsmg"]
        view {
            label = "Incidencia";
            show {
                shortcut = "shIncidencia";  
                shortcut-view = "VistaDescripcion";
            }
        }
		

		["mob_f5w"]
		view {
			label = "Expediente";
			show {
				target = ref Expediente.InformacionGeneral;
			}
		}
		


		onAbort() {
			doGoto(Place :: AbortarExpediente, "Tarea abortada");
		}

		onInitialize() {
			AnexoWorkmap :: inicializar(this);
		}

		["mk5qmbq"]
		place Iniciado {
			is-initial;
			onArrive() {
				var incidencia = this.shIncidencia as coordinacion.incidencias.Incidencia;
				
				if (incidencia.getFlag("saltartramite") != null){
					doGoto(Place::IniciarActuacion,"");					
					return;
				}
				if (incidencia.getFlag("saltarainspeccion") != null){
					doGoto(Place::GestionarInspeccion,"");					
					return;
				}
				
				
				if(incidencia.getFlag("cerrada") != null) {
					doGoto(Place :: CerrarExpediente, "Se cerrará el expediente");
					return;
				}
				var String esCorregida = incidencia.getFlag("corregida");
				if(esCorregida != null) {
					esCorregida = esCorregida.replaceAll("[\n\r]", "");
					if(esCorregida.equals("true")) {
						doGoto(Place :: GestionarInspeccion, "Incidencia ya corregida, ¿que desea hacer?");
						return;
					}
					else {
						doGoto(Place :: GestionarNoCorregida, "Incidencia no corregida, ¿que desea hacer?");
						return;
					}
				}
				else {
					if(this.getFlag("urgente") != null && this.getFlag("urgente").equals("true")) {
						doGoto(Place :: ConfiguracionIniciarActuacion, "Iniciar resolución de la incidencia");
						return;
					}
					else {
						
						if (Setup :: getVariable("SoloEjecucion") != null) {
							if(Setup :: getVariable("SoloEjecucion").equals("true")) {
								doGoto(Place :: GestionadoSoloEjecucion, "Iniciar resolución de la incidencia");
								return;
							}
							else {
								doGoto(Place :: Gestionado, "Iniciar resolución de la incidencia");
								return;
							}							
						}else{
							doGoto(Place :: Gestionado, "Iniciar resolución de la incidencia");
							return;
						}
					}
				}
			}
		}

		["mh4rosg"]
		place Gestionado {

			["m5jykyw"]
			line {

				["mutu3gq"]
				stop StopVerificar {
					history = "Se procede a verificar la incidencia";
					goto = ref TipoVerificacion;
					label = "Hay que verificar";
				}

				["mr_cihg"]
				stop StopCorregir {
					history = "Se procede a corregir la incidencia";
					goto = ref ConfiguracionIniciarActuacion;
					label = "Hay que corregir";
				}

				["mqnyj2g"]
				stop StopCerrar {
					history = "Se ha procedido a cerrar el expediente";
					goto = ref IncidenciaCancelada;
					label = "No procede. Cerrar expediente";
				}
				label = "Clasifique el trabajo correctivo";
			}
		}

		["m7oiu_q"]
		place GestionadoSoloEjecucion {

			["mppos1q"]
			line {

				["m0iieka"]
				stop StopCorregir {
					history = "Se procede a corregir la incidencia";
					goto = ref ConfiguracionIniciarActuacion;
					label = "Hay que corregir";
				}

				["mpzzx4g"]
				stop StopCerrar {
					history = "Se ha procedido a cerrar el expediente";
					goto = ref IncidenciaCancelada;
					label = "No procede. Cerrar expediente";
				}
				label = "Clasifique el trabajo correctivo";
			}
		}

		["m6rsbkq"]
		place TipoVerificacion {
			onArrive() {
				var tipo = Setup :: getVariable("TieneVerificacionExterna");
				var usaJobs = Setup :: getVariable("UsaJobs");
				if(tipo != null) {
					if(tipo.equals("true")) {
						doGoto(Place :: ConfiguracionIniciarVerificacionExterna, "Encargo de verificación delegado a la unidad de ejecución") }
					else {
						if(usaJobs != null) {
							if(usaJobs.equals("true")) {
								doGoto(Place :: IniciarVerificacionJob, "Encargo de verificación realizado por la unidad de coordinación") }
							else {
								doGoto(Place :: ConfiguracionIniciarVerificacionSinJob, "Encargo de verificación realizado por la unidad de coordinación") }
						}
					}
				}
			}
		}

		["mzkpbfw"]
		place ConfiguracionIniciarVerificacionSinJob {

			["mhpic_g"]
			edition {
				goto = ref IniciarVerificacionSinJob;
				history = "Encargo de verificación configurado";
				label = "Configurar encargo de verificación";
				use {
					form = ref ConfigurarEncargoCorrectivo;
					with-view = ref ConfigurarEncargoCorrectivo.Vista;
				}

				onSetup(ConfigurarEncargoCorrectivo f) {
					SetupDelegation :: configurarEncargo(f, this, this.getShIncidencia as coordinacion.incidencias.Incidencia);
				}

				onSolve(ConfigurarEncargoCorrectivo f) {
					var Expediente expediente = this.getTarget();
					var EncargoCV encargo; 
					if (this.shEncargoCV == null){
						encargo = EncargoCV :: createNew(expediente.coleccion);
						this.setShEncargoCV(encargo);
						this.save;
					}else{
						encargo = this.getShEncargoCV() as EncargoCV;
					}
					var fichaExpediente = expediente.fichaExpedienteCorrectivo;
					var fichaEncargo = encargo.ficha;
					var codigo = 0;
					if(this.getFlag("codigoEV") != null) {
						codigo = Integer :: parseInt(this.getFlag("codigoEV")) + 1;
					}
					else {
						codigo = 1;
					}
					this.setFlag("codigoEV", String :: valueOf(codigo));
					fichaEncargo.setCodigo(fichaExpediente.getCodigo + " V-" + codigo);
					fichaEncargo.setFechaInicio(f.fechaInicio);
					fichaEncargo.setFechaFinLimite(f.fechaFinLimite);
					fichaEncargo.setObservaciones(f.observaciones);
					fichaEncargo.prioridad = fichaExpediente.prioridad;
					Utilidad::asignarMultiple(f.adjuntos,fichaEncargo.getAdjuntosField());
					fichaEncargo.save;
					var orden = otv :: Exportador :: doExportOf(fichaEncargo).toNewDocument;
					AnexoWorkmap::cambiarEstadoIncidencia(this.shIncidencia as Incidencia,new Term(null, "Verificando"));
					orden.consolidate();
					fichaEncargo.setFechaEnvioOT(new Date());
					fichaEncargo.setOt(orden.toLink);
					fichaEncargo.adjuntosField.addNewAll(f.adjuntos);
					fichaEncargo.save;
					var incidencia = this.shIncidencia as Incidencia;
					asociarDocumentoOt(incidencia, orden, "V", this.getFlag("codigoEV"));
					var links = new ArrayList <MonetLink>;
					links.^add(orden.toMonetLink);
					this.addLog("Orden de trabajo generada", "Orden de trabajo de verificación", links);
					this.setShEncargoCV(encargo);
					this.save();
				}
			}
		}

		["m8tz6vq"]
		place IniciarVerificacionSinJob {
			["mpfh3gq"]
			 line {
			 	label = "Rellenar resultados de la verificación";
		 	["maoyweg"]
			 stop StopName {
			 	label = "Iniciar configuración de resultados";
			 	goto = ref ResultadoVerificacionSinJob;
			 	history = "Configuración de resultados iniciada";
			 }
		 } 
			
			
		}
		
		["mdnahba"]
		place ResultadoVerificacionSinJob {

			["mksydga"]
			edition {
				history = "Resultados de la verificación completados";
				use {
					form = ref FormResultado;
					with-view = ref FormResultado.Vista;
				}
				onSolve(coordinacion.modulos.asistentes.FormResultado f) {
					var encargo = this.getShEncargoCV as encargos.EncargoCV;
					var ficha = encargo.ficha;
					ficha.setFechaInicioReal(f.getFechaInicioReal());
					ficha.setFechaFinReal(f.getFechaFinReal());
					ficha.setObservacionesResultado(f.getObsResultado());
					ficha.setImagenResultado(f.getImagenResultado());
					ficha.setFechaRecepcionPT(new Date());
					coordinacion::modulos::utilidades::Utilidad::asignarMultiple(f.getAdjuntosResultado(),ficha.getAdjuntosResultadoField());
					ficha.save();
					
				}
				label = "Resultados de la verificación";
				goto = ref ResueltoVerificacionSinJob;
			}
		}
		
		["mrdpwug"]
		place ResueltoVerificacionSinJob {
			
			["mjt2peq"]
			line {
				label = "Resultado de la verificación";
				
				["mp3zogg"]
				stop Verificada {
					label = "Verificación Positiva. Se tramita expediente";
					goto = ref ConfiguracionIniciarActuacion;
					history = "La verificación ha sido positiva";
					onTake() {
						var encargo = this.getShEncargoCV as encargos.EncargoCV;
						generarPtvInterno(encargo, true);
						
					}
				}
				
				["misucqq"]
				stop NoVerificada {
					label = "Verificación Negativa. No se tramita expediente";
					goto = ref CerrarExpediente;
					history = "La verificación ha sido negativa";
					onTake() {
						var encargo = this.getShEncargoCV as encargos.EncargoCV;
						generarPtvInterno(encargo, false);
					}
				}
			}
		}

		function generarPtvInterno(encargos.EncargoCV encargo, boolean resultado){
			var ficha = encargo.getFicha;
			ficha.resultado = resultado;
			ficha.save;
			var parteInterno = ptv :: Exportador :: doExportOf(ficha).toNewDocument;
			parteInterno.consolidate();
			ficha.setPt(parteInterno.toLink);
			ficha.save;						
			var links = new ArrayList <MonetLink>;
			links.^add(parteInterno.toMonetLink);
			this.addLog("Parde de trabajo generado", "Parte de trabajo de verificación", links);
			var incidencia = this.shIncidencia as Incidencia;
			asociarDocumentoPt(incidencia, parteInterno, "V", this.getFlag("codigoEV"));
			AnexoWorkmap::cambiarEstadoIncidencia(incidencia,new Term("e002", "Verificada"));
			if (resultado){
				HechosIncidencia :: hechoIncidenciaVerificada(incidencia);
				coordinacion :: modulos :: utilidades :: SendMail :: sendNotification("El trabajo: " + this.getLabel() + " ha sido verificado. Se procede a tramitar el expediente", this);
			}
		}		
		
				

		["m_o2vda"]
		place IniciarVerificacionSinJobDelegada {

			["m_l18la"]
			delegation {
				history = "Verificación iniciada (Sin Job)";
				label = "Verificar sin Job e interna";
				goto = ref EnviarOtvInterno;
				provider = ref ServicioVerificacionInterno;

				onSetup(DelegationSetup ds) {
					ds.cancel;
				}

				onSetupComplete(String providerLabel, Date suggestedStartDate, Date suggestedEndDate, String observations, boolean urgent) {
					var encargo = this.shEncargoCV as EncargoCV;
					var incidencia = this.shIncidencia as coordinacion.incidencias.Incidencia;
					AnexoWorkmap::setupComplete(incidencia,providerLabel,encargo.ficha);
				}
			}
		}

		["mmar_rq"]
		place TipoInspeccion {
			onArrive() {
				var tipo = Setup :: getVariable("TieneInspeccionExterna");
				var usaJobs = Setup :: getVariable("UsaJobs");
				if(tipo != null) {
					if(tipo.equals("true")) {
						doGoto(Place :: ConfiguracionIniciarInspeccionExterna, "Encargo de inspección delegado a la unidad de ejecución");
					}
					else {
						if(usaJobs != null) {
							if(usaJobs.equals("true")) {
								doGoto(Place :: IniciarInspeccionJob, "Encargo de inspección realizado por la unidad de coordinación");
							}
							else {
								doGoto(Place :: ConfiguracionIniciarInspeccionSinJob, "Encargo de inspección realizado por la unidad de coordinación");
							}
						}
					}
				}
			}
		}

		["mv073_w"]
		place ConfiguracionIniciarInspeccionSinJob {

			["m9yylmg"]
			edition {
				goto = ref IniciarInspeccionSinJob;
				history = "Encargo de inspección configurado";
				label = "Configurar encargo de inspección";
				use {
					form = ref ConfigurarEncargoCorrectivo;
					with-view = ref ConfigurarEncargoCorrectivo.Vista;
				}

				onSetup(ConfigurarEncargoCorrectivo f) {
					SetupDelegation :: configurarEncargo(f, this, this.getShIncidencia as coordinacion.incidencias.Incidencia);
				}

				onSolve(ConfigurarEncargoCorrectivo f) {
					AnexoWorkmap :: solveConfiguracionEncargoInspeccion(this, "codigoEI", f);
				}
			}
		}
		
		["mnuhuyg"]
		place IniciarInspeccionSinJob {
			["mbomgpa"]
			line {
			 	label = "Rellenar resultados de la inspección";
			 	["mqgxc3g"]
				stop StopIniciarInspeccion {
			 		label = "Iniciar configuración de resultados";
			 		goto = ref ResultadoInspeccionSinJob;
			 		history = "Configuración de resultados iniciada";
			 	}
		 	} 
		}
		
		
		["mv2spvw"]
		place ResultadoInspeccionSinJob {
			
			["mf2sk8a"]
			edition {
				history = "Resultados de la inspección completados";
				use {
					form = ref FormResultado;
					with-view = ref FormResultado.Vista;
				}
				onSolve(coordinacion.modulos.asistentes.FormResultado f) {
					var encargo = this.getShEncargoCI as encargos.EncargoCI;
					var ficha = encargo.ficha;
					ficha.setFechaInicioReal(f.getFechaInicioReal());
					ficha.setFechaFinReal(f.getFechaFinReal());
					ficha.setObservacionesResultado(f.getObsResultado());
					ficha.setImagenResultado(f.getImagenResultado());
					ficha.setFechaRecepcionPT(new Date());
					coordinacion::modulos::utilidades::Utilidad::asignarMultiple(f.getAdjuntosResultado(),ficha.getAdjuntosResultadoField());
					ficha.save();

					
					
				}
				label = "Resultados de la inspección";
				goto = ref ResueltoInspeccionSinJob;
			}
		}
		
		["mqdqvbg"]
		place ResueltoInspeccionSinJob {
			
			["mhsfclg"]
			line {
				label = "Resultado de la incidencia inspeccionada";
				["mp75klg"]
				stop Inspeccionada {
					label = "Se ha solucionado la incidencia";
					goto = ref CerrarExpediente;
					history = "Se ha seleccionado incidencia solucionada";
					onTake() {
						var encargo = this.getShEncargoCI as encargos.EncargoCI;
						generarPticInterno(encargo, true);
					}
				}
				
				["mejseqg"]
				stop NoInspeccionada {
					label = "No se ha solucionado la incidencia.";
					goto = ref VolverEjecutar;
					history = "Se ha seleccionado incidencia No solucionada";
					onTake() {
						var encargo = this.getShEncargoCI as encargos.EncargoCI;
						generarPticInterno(encargo, false);
					}
				}
			}
		}

		
		function generarPticInterno(encargos.EncargoCI encargo, boolean resultado){
			var ficha = encargo.getFicha;
			ficha.resultado = resultado;
			ficha.save;
			var parteInterno = ptic :: Exportador :: doExportOf(ficha).toNewDocument;
			parteInterno.consolidate();
			ficha.setPt(parteInterno.toLink);
			ficha.save;					
			var links = new ArrayList <MonetLink>;
			links.^add(parteInterno.toMonetLink);
			this.addLog("Parde de trabajo generado", "Parte de trabajo de inspección", links);
			var incidencia = this.getShIncidencia as Incidencia;
			asociarDocumentoPt(incidencia, parteInterno, "I", this.getFlag("codigoEI"));
			AnexoWorkmap::cambiarEstadoIncidencia(incidencia,new Term("e007", "Inspeccionada"));
			if (resultado){
				HechosIncidencia :: hechoIncidenciaInspeccionada(incidencia);								
				coordinacion :: modulos :: utilidades :: SendMail :: sendNotification("El trabajo: " + this.getLabel() + " ha sido inspeccionado. La incidencia ha sido solucionada", this);
			}	
		}
		
				

		["ma_imqq"]
		place IniciarInspeccionSinJobDelegada {

			["mhk6esa"]
			delegation {
				history = "Inspección iniciada (Sin Job)";
				label = "Inspeccionar sin Job e interna";
				goto = ref EsperandoPtic;
				provider = ref ServicioInspeccionInterno;

				onSetup(DelegationSetup ds) {
					ds.cancel;
				}

				onSetupComplete(String providerLabel, Date suggestedStartDate, Date suggestedEndDate, String observations, boolean urgent) {
					var encargo = this.shEncargoCI as EncargoCI;
					var incidencia = this.shIncidencia as coordinacion.incidencias.Incidencia;
					AnexoWorkmap::setupComplete(incidencia,providerLabel,encargo.ficha);
				}
			}
		}

		["mekz_aq"]
		place IniciarVerificacionJob {

			["mbkcgiq"]
			send-job {
				history = "Se ha iniciado verificación";
				role = ref coordinacion.RoleInspector;
//MERGE
//				role = ref coordinacion.RoleInspector;				
				job = ref jobs.Verificar;
				label = "Iniciando verificación";
				goto = ref EsperandoPtvInterna;
				onCreate(JobRequest msg) {
//MERGE
//					msg.setLabel("Verificar " + this.^label);
					var encargo = this.shEncargoCV as encargos.EncargoCV;					
					var fichaEncargo = encargo.ficha;
					var orden = otv :: Exportador :: doExportOf(fichaEncargo).toNewDocument;
					var incidencia = this.shIncidencia as Incidencia;
					AnexoWorkmap::cambiarEstadoIncidencia(incidencia,new Term(null, "Verificando"));
//MERGE
//					AnexoWorkmap::cambiarEstadoIncidencia(this.shIncidencia as coordinacion.incidencias.Incidencia ,new Term(null, "Inspeccionando"));
					orden.consolidate();
					fichaEncargo.setFechaEnvioOT(new Date());
					fichaEncargo.setOt(orden.toLink);
					fichaEncargo.save;
					var links = new ArrayList <MonetLink>;
					links.^add(orden.toMonetLink);
					this.addLog("Orden de trabajo generada", "Orden de trabajo de verificación", links);
					asociarDocumentoOt(incidencia, orden, "V", this.getFlag("codigoEVJob"));
					msg.attachDocument("Orden de trabajo", orden);
					msg.setLabel("Verificar " + incidencia.objetoActuacion.^label+ " " + this.^label);
				}
				onSetupJob(JobSetup js) {
					SetupDelegation :: configurarJob(js, this.shIncidencia as Incidencia);
				}				
				
				onSetupJobComplete(String providerLabel,Date suggestedStartDate,Date suggestedEndDate,String observations,boolean urgent) {
					var Expediente expediente = this.getTarget();
					var encargo = EncargoCV :: createNew(expediente.coleccion);
					this.shEncargoCV = encargo;
					this.save;
					var codigo = 0;
					if(this.getFlag("codigoEVJob") != null) {
						codigo = Integer :: parseInt(this.getFlag("codigoEVJob")) + 1;
					}
					else {
						codigo = 1;
					}
					this.setFlag("codigoEVJob", String :: valueOf(codigo));
					
					AnexoWorkmap :: rellenarFichaEncargoJobCV(encargo, expediente, " V-", codigo, suggestedStartDate, suggestedEndDate, observations);
				}				
									
				onFinished(JobResponse msg) {
					var encargo = this.shEncargoCV as EncargoCV;
					var verificado = AnexoWorkmap::verificarInternaJob(encargo , msg);
					var parteInterno = ptv :: Exportador :: doExportOf(encargo.ficha).toNewDocument;
					parteInterno.consolidate();
					var links = new ArrayList <MonetLink>;
					links.^add(parteInterno.toMonetLink);
					this.addLog("Parde de trabajo generado", "Parte de trabajo de verificación", links);					
					
					var bloqueo = coordinacion :: procesos :: cori :: workmap :: Lock :: EsperandoPtvInterna_ExitPtvInterna;
					if (!verificado){					
						bloqueo = coordinacion :: procesos :: cori :: workmap :: Lock :: EsperandoPtvInterna_ExitPtvNoVerificadoInterna;					
					}else{
						var incidencia = this.shIncidencia as Incidencia;
						AnexoWorkmap::cambiarEstadoIncidencia(incidencia,new Term("e002", "Verificada"));
						incidencia.setFechaVerificacion(encargo.ficha.fechaFinReal);
						incidencia.save();
						HechosIncidencia :: hechoIncidenciaVerificada(incidencia);
						coordinacion :: modulos :: utilidades :: SendMail :: sendNotification("El trabajo: " + this.getLabel() + " ha sido verificado. Se procede a tramitar el expediente", this);
					}
					var incidencia = this.shIncidencia as Incidencia;
					asociarDocumentoPt(incidencia, parteInterno, "V", this.getFlag("codigoEVJob"));
					var Post post = Post.createRequest();
					post.setTitle("Ha llegado un trabajo de verificación desde un dispositivo mobile " + this.getLabel());
					post.setTitleLink(this.toMonetLink());
					post.setBody(this.getLabel());
					post.setBodyLink(this.toMonetLink());
					NewsService.postAndNotifyToAll(post);					
					
					doUnlock(bloqueo);
				}
			}
		}

		["mybswra"]
		place ConfiguracionIniciarVerificacionExterna {

			["mdawc8w"]
			edition {
				goto = ref IniciarVerificacionExterna;
				history = "Encargo de verificación configurado";
				label = "Configurar encargo de verificación";
				use {
					form = ref ConfigurarEncargoCorrectivo;
					with-view = ref ConfigurarEncargoCorrectivo.Vista;
				}

				onSetup(coordinacion.modulos.asistentes.ConfigurarEncargoCorrectivo f) { SetupDelegation :: configurarEncargo(f, this, this.shIncidencia as coordinacion.incidencias.Incidencia);
				}

				onSolve(coordinacion.modulos.asistentes.ConfigurarEncargoCorrectivo f) {
					var Expediente expediente = this.getTarget();
					var encargo = EncargoCV :: createNew(expediente.coleccion);
					var fichaEncargo = encargo.ficha;
					var fichaExpediente = expediente.fichaExpedienteCorrectivo;
					var codigo = 0;
					if(this.getFlag("codigoEV") != null) {
						codigo = Integer :: parseInt(this.getFlag("codigoEV")) + 1;
					}
					else {
						codigo = 1;
					}
					this.setFlag("codigoEV", String :: valueOf(codigo));
					fichaEncargo.setCodigo(fichaExpediente.getCodigo + " V-" + codigo);
					fichaEncargo.setFechaInicio(f.fechaInicio);
					fichaEncargo.setFechaFinLimite(f.fechaFinLimite);
					fichaEncargo.setObservaciones(f.observaciones);
					Utilidad::asignarMultiple(f.adjuntos, fichaEncargo.adjuntosField); 
					fichaEncargo.adjuntosField.addNewAll(f.adjuntos);
					fichaEncargo.prioridad = fichaExpediente.prioridad;
					fichaEncargo.save();
					this.setShEncargoCV(encargo);
					this.save();
				}
			}
		}

		["myz2pta"]
		place IniciarVerificacionExterna {

			["mrvge3w"]
			delegation {
				history = "Se ha iniciado el encargo de verificación";
				label = "Encargo de verificación iniciado";
				goto = ref EnviarOtv;
				provider = ref ServicioVerificacion;

				onSetup(DelegationSetup ds) {
					ds.cancel;
				}

				onSetupComplete(String providerLabel, Date suggestedStartDate, Date suggestedEndDate, String observations, boolean urgent) {
					var encargo = this.shEncargoCV as EncargoCV;
					var incidencia = this.shIncidencia as coordinacion.incidencias.Incidencia;
					AnexoWorkmap::setupComplete(incidencia,providerLabel,encargo.ficha);
				}
			}
		}

		["mnaybmw"]
		place ConfiguracionIniciarActuacion {

			["mcdlh6q"]
			edition {
				goto = ref IniciarActuacion;
				history = "Encargo de actuación configurado";
				label = "Configurar encargo de actuación";
				use {
					form = ref ConfigurarEncargoCorrectivo;
					with-view = ref ConfigurarEncargoCorrectivo.Vista;
				}

				onSetup(ConfigurarEncargoCorrectivo f) {
					SetupDelegation :: configurarEncargo(f, this, this.getShIncidencia as coordinacion.incidencias.Incidencia);
				}

				onSolve(ConfigurarEncargoCorrectivo f) {
					var Expediente expediente = this.getTarget();
					var encargo = EncargoCA :: createNew(expediente.coleccion);
					var fichaEncargo = encargo.ficha;
					var fichaExpediente = expediente.fichaExpedienteCorrectivo;
					var codigo = 0;
					if(this.getFlag("codigoEA") != null) {
						codigo = Integer :: parseInt(this.getFlag("codigoEA")) + 1;
					}
					else {
						codigo = 1;
					}
					this.setFlag("codigoEA", String :: valueOf(codigo));
					fichaEncargo.setCodigo(fichaExpediente.getCodigo + " A-" + codigo);
					fichaEncargo.setFechaInicio(f.fechaInicio);
					fichaEncargo.setFechaFinLimite(f.fechaFinLimite);
					fichaEncargo.setObservaciones(f.observaciones);
					fichaEncargo.prioridad = fichaExpediente.prioridad;
					Utilidad::asignarMultiple(f.adjuntos,fichaEncargo.getAdjuntosField());
					fichaEncargo.save;
					this.setShEncargoCA(encargo);
					this.save();
				}
			}
		}

		["mze3xea"]
		place IniciarActuacion {

			["mtikzeq"]
			delegation {
				history = "Se ha iniciado el encargo de actuación";
				label = "Encargo de actuación iniciado";
				goto = ref EnviarOtac;
				provider = ref ServicioActuacion;

				onSetup(DelegationSetup ds) {
					ds.cancel;
				}

				onSetupComplete(String providerLabel, Date suggestedStartDate, Date suggestedEndDate, String observations, boolean urgent) {
					var encargo = this.shEncargoCA as EncargoCA;
					var incidencia = this.shIncidencia as coordinacion.incidencias.Incidencia;
					AnexoWorkmap::setupComplete(incidencia,providerLabel,encargo.ficha);
				}
			}
		}

		["m46doua"]
		place ConfiguracionIniciarInspeccionExterna {

			["m6gbcea"]
			edition {
				goto = ref IniciarInspeccionExterna;
				history = "Encargo de inspección configurado";
				label = "Configurar encargo de inspección";
				use {
					form = ref ConfigurarEncargoCorrectivo;
					with-view = ref ConfigurarEncargoCorrectivo.Vista;
				}

				onSetup(ConfigurarEncargoCorrectivo f) {
					SetupDelegation :: configurarEncargo(f, this, this.getShIncidencia as coordinacion.incidencias.Incidencia);
				}

				onSolve(ConfigurarEncargoCorrectivo f) {
					var Expediente expediente = this.getTarget();
					var encargo = EncargoCI :: createNew(expediente.coleccion);
					var fichaEncargo = encargo.ficha;
					var fichaExpediente = expediente.fichaExpedienteCorrectivo;
					var codigo = 0;
					if(this.getFlag("codigoEI") != null) {
						codigo = Integer :: parseInt(this.getFlag("codigoEI")) + 1;
					}
					else {
						codigo = 1;
					}
					this.setFlag("codigoEI", String :: valueOf(codigo));
					fichaEncargo.setCodigo(fichaExpediente.getCodigo + " I-" + codigo);
					fichaEncargo.setFechaInicio(f.fechaInicio);
					fichaEncargo.setFechaFinLimite(f.fechaFinLimite);
					fichaEncargo.setObservaciones(f.observaciones);
					fichaEncargo.prioridad = fichaExpediente.prioridad;
					var encargoCA =  this.shEncargoCA as encargos.EncargoCA;
					var fichaCA = encargoCA.ficha;
					if (fichaCA.getPt != null){
						var ptac = fichaCA.getPtField.^node as documentos.Ptac;
						fichaEncargo.adjuntosField.addNew(ptac.content);
					}
					Utilidad::asignarMultiple(f.adjuntos,fichaEncargo.getAdjuntosField());
					fichaEncargo.save;
					this.setShEncargoCI(encargo);
					this.save();
				}
			}
		}

		["mdlnvea"]
		place IniciarInspeccionExterna {

			["morygma"]
			delegation {
				history = "Se ha iniciado el encargo de inspección";
				label = "Encargo de inspección iniciado";
				goto = ref EnviarOtic;
				provider = ref ServicioInspeccion;

				onSetup(DelegationSetup ds) {
					ds.cancel;
				}

				onSetupComplete(String providerLabel, Date suggestedStartDate, Date suggestedEndDate, String observations, boolean urgent) {
					var encargo = this.shEncargoCI as EncargoCI;
					var incidencia = this.shIncidencia as coordinacion.incidencias.Incidencia;
					AnexoWorkmap::setupComplete(incidencia,providerLabel,encargo.ficha);
				}
			}
		}
		
		

		["mzq_0xa"]
		place EnviarOtvInterno {

			["mbibwea"]
			send-request {
				label = "Envío de Otv";
				history = "Otv enviada";
				request = ref ServicioVerificacionInterno.Otv;
				goto = ref EsperandoPtvInterna;
				provider = ref ServicioVerificacionInterno;
			}
		}

		["mshrj4w"]
		place EnviarOtv {

			["mrpcs1q"]
			send-request {
				label = "Envío de Otv";
				history = "Otv enviada";
				request = ref ServicioVerificacion.Otv;
				goto = ref EsperandoPtv;
				provider = ref ServicioVerificacion;
			}
		}

		["m_ntnuw"]
		place EnviarOtac {

			["msoudpg"]
			send-request {
				label = "Envío de OTAC";
				history = "Otac enviada";
				request = ref ServicioActuacion.Otac;
				goto = ref EsperandoPtac;
				provider = ref ServicioActuacion;
			}
		}

		["mbefmng"]
		place EnviarOtic {

			["mfx24bw"]
			send-request {
				label = "Envío de Otic";
				history = "Otic enviada";
				request = ref ServicioInspeccion.Otic;
				goto = ref EsperandoPtic;
				provider = ref ServicioInspeccion;
			}
		}

		["m0fg3xg"]
		place EsperandoPtvInterna {

			["mtjl0iq"]
			door DoorPtvInterna {
				label = "Esperando Ptv";

				["mvnshxg"]
				exit ExitPtvInterna {
					history = "Ptv recibido";
					goto = ref ConfiguracionIniciarActuacion;
				}

				["mkr5tiq"]
				exit ExitPtvNoVerificadoInterna {
					history = "Ptv recibido. La incidencia no procede se cerrará el expediente";
					goto = ref CerrarExpediente;
				}
			}
		}

		["mg5dghg"]
		place EsperandoPtv {

			["mq3r_qg"]
			door DoorPtv {
				label = "Esperando Ptv";

				["mu9k9qq"]
				exit ExitPtv {
					history = "Ptv recibido";
					goto = ref ConfirmarPtvIniciarActuacion;
				}

				["mqvyg0g"]
				exit ExitPtvNoVerificado {
					history = "Ptv recibido. La incidencia no procede se cerrará el expediente";
					goto = ref ConfirmarPtvCerrarExpediente;
				}
			}
		}

		["mt_htdq"]
		place ConfirmarPtvIniciarActuacion {

			["mi53riq"]
			send-request {
				request = ref ServicioVerificacion.PeticionTerminarV;
				provider = ref ServicioVerificacion;
				goto = ref ConfiguracionIniciarActuacion;
				history = "";
				label = "";
			}
		}

		["mgthmfg"]
		place ConfirmarPtvCerrarExpediente {

			["mh_pzba"]
			send-request {
				request = ref ServicioVerificacion.PeticionTerminarV;
				provider = ref ServicioVerificacion;
				goto = ref CerrarExpediente;
				history = "";
				label = "";
			}
		}

		["missu2g"]
		place EsperandoPtac {

			["mmbg7vw"]
			door DoorPtac {
				label = "Esperando Ptac";

				["mkhczeg"]
				exit ExitPtac {
					history = "Ptac recibido. Incidencia corregida";
					goto = ref ConfirmarPtacGestionarInspeccion;
				}

				["mo8uhmg"]
				exit ExitPtacSoloEjecucion {
					history = "Ptac recibido. Incidencia corregida";
					goto = ref ConfirmarPtacGestionarSoloEjecucion;
				}

				["mpgetta"]
				exit ExitPtacNoCorregido {
					history = "Ptac recibido. Incidencia No corregida";
					goto = ref ConfirmarPtacVolverEjecutar;
				}
			}
		}

		["mkxwqzg"]
		place ConfirmarPtacGestionarInspeccion {

			["mtjveow"]
			send-request {
				request = ref ServicioActuacion.PeticionTerminarA;
				provider = ref ServicioActuacion;
				goto = ref GestionarInspeccion;
				history = "";
				label = "";
			}
		}

		["m_fc5jg"]
		place ConfirmarPtacGestionarSoloEjecucion {

			["mshn30g"]
			send-request {
				request = ref ServicioActuacion.PeticionTerminarA;
				provider = ref ServicioActuacion;
				goto = ref GestionarSoloEjecucion;
				history = "";
				label = "";
			}
		}

		["mvcopug"]
		place ConfirmarPtacVolverEjecutar {

			["mtjveow"]
			send-request {
				request = ref ServicioActuacion.PeticionTerminarA;
				provider = ref ServicioActuacion;
				goto = ref VolverEjecutar;
				history = "";
				label = "";
			}
		}

		["mtzdeya"]
		place EsperandoPtic {

			["mjthdmg"]
			door DoorPtic {
				label = "Esperando Ptic";

				["msrdt4a"]
				exit ExitPtic {
					history = "Ptic recibido. Incidencia solucionada";
					goto = ref ConfirmarPticCerrarExpediente;
				}

				["mwte5ig"]
				exit ExitPticNoSolucionado {
					history = "Ptic recibido. Incidencia No corregida";
					goto = ref ConfirmarPticVolverEjecutar;
				}
			}
		}

		["mlppvnw"]
		place EsperandoPticInterna {
			["mxiycgq"]
			door DoorPticInterna {
				label = "Esperando Ptic";
				["mvdkmnw"]
				exit ExitPticInterna {
					history = "Ptic recibido. Incidencia solucionada";
					goto = ref CerrarExpediente;
				}
				["mndxqng"]
				exit ExitPticNoSolucionadoInterna {
					history = "Ptic recibido. Incidencia No corregida";
					goto = ref VolverEjecutar;
				}
			}
		}		

		["mw1ztmg"]
		place ConfirmarPticCerrarExpediente {

			["mrdswha"]
			send-request {
				request = ref ServicioInspeccion.PeticionTerminarI;
				provider = ref ServicioInspeccion;
				goto = ref CerrarExpediente;
				history = "";
				label = "";
			}
		}

		["mh_tmeq"]
		place ConfirmarPticVolverEjecutar {

			["mqku8ma"]
			send-request {
				request = ref ServicioInspeccion.PeticionTerminarI;
				provider = ref ServicioInspeccion;
				goto = ref VolverEjecutar;
				history = "";
				label = "";
			}
		}

		["m0fbq2q"]
		place GestionarSoloEjecucion {

			["mvorj_q"]
			line {
				label = "¿Reejecutar el trabajo?";

				["mi2cfew"]
				stop StopReejecutar {
					label = "Reejecutar";
					goto = ref ConfiguracionIniciarActuacion;
					history = "Encargo de actuación reejecutado";
				}

				["mmh1k0w"]
				stop StopTerminar {
					history = "Trabajo correctivo terminado";
					goto = ref CerrarExpediente;
					label = "Terminar";
				}
			}
		}

		["mlwll8g"]
		place GestionarInspeccion {

			["mnswdma"]
			line {
				label = "Desea inspeccionar";

				["m5lb3ma"]
				stop StopInspeccionar {
					history = "Trabajo correctivo mandando a inspeccionar";
					goto = ref TipoInspeccion;
					label = "Inspeccionar el trabajo correctivo";
				}

				["maj5beg"]
				stop StopReejecutar {
					label = "Reejecutar";
					goto = ref ConfiguracionIniciarActuacion;
					history = "Encargo de actuación reejecutado";
				}

				["mld67uq"]
				stop StopTerminar {
					history = "Trabajo correctivo terminado";
					goto = ref CerrarExpediente;
					label = "Terminar sin inspección";
				}
			}
		}

		["m7p4bua"]
		place GestionarNoCorregida {

			["mnedkmw"]
			line {
				label = "¿Que desea hacer?";

				["mjbt7mg"]
				stop StopReejecutar {
					label = "Reejecutar";
					goto = ref ConfiguracionIniciarActuacion;
					history = "Encargo de actuación reejecutado";
				}

				["mp2fcjg"]
				stop StopTerminar {
					history = "Trabajo correctivo terminado";
					goto = ref CerrarExpediente;
					label = "Terminar";
				}
			}
		}

		["m76qdra"]
		place IncidenciaCancelada {
			onArrive() {
				var expediente = this.getTarget();
				var ficha = expediente.fichaExpedienteCorrectivo;
				ficha.setFechaArchivo(new Date());
				ficha.setEstado(new Term("cerrado", null));
				ficha.save;
				var incidencia = this.shIncidencia as coordinacion.incidencias.Incidencia;
				incidencia.estado = new Term(null, "Cancelada");
				incidencia.fechaModificacion = new Date();
				incidencia.fechaCierre = new Date;
				var fichaExpediente = expediente.fichaExpedienteCorrectivo;
				fichaExpediente.estado = new Term("noProcedente", "No procedente");
				incidencia.save;
				incidencia.lock;
				if (incidencia.getFlag("verificando") == null && incidencia.getFlag("actuando") == null){
					HechosIncidencia :: hechoIncidenciaTramitada(incidencia);
				}
				HechosIncidencia :: hechoIncidenciaCancelada(incidencia);
				fichaExpediente.save;
				doGoto(Place :: Finalizar, "Expediente cerrado");
			}
		}

		["mdimdqq"]
		place CerrarExpediente {
			onArrive() {
				AnexoWorkmap :: cerrarExpediente(this);
			}
		}

		["m_byr2a"]
		place Finalizar {
			is-final;
		}

		["mtszgta"]
		place IniciarInspeccionJob {

			["mo0nb9g"]
			send-job {
				history = "Se ha iniciado la inspección";
				role = ref coordinacion.RoleInspector;
				job = ref jobs.Inspeccionar;
				label = "Iniciando inspección";
//MERGE
//					msg.setLabel("Inspeccionar " + this.^label);
				goto = ref EsperandoPticInterna;
				onCreate(JobRequest msg) {
//MERGE
//MERGE
//					AnexoWorkmap::cambiarEstadoIncidencia(this.shIncidencia as Incidencia,new Term(null, "Verificando"));
//					var fichaEncargo = encargo.ficha; 
					var encargo = this.shEncargoCI as encargos.EncargoCI;
					var fichaEncargo = encargo.ficha;
					var orden = otic :: Exportador :: doExportOf(fichaEncargo).toNewDocument;
					var incidencia = this.shIncidencia as coordinacion.incidencias.Incidencia;
					AnexoWorkmap::cambiarEstadoIncidencia(incidencia ,new Term(null, "Inspeccionando"));
					orden.consolidate();
					fichaEncargo.setFechaEnvioOT(new Date());
					fichaEncargo.setOt(orden.toLink);
					fichaEncargo.save;
					var links = new ArrayList <MonetLink>;
					links.^add(orden.toMonetLink);
					asociarDocumentoOt(incidencia, orden, "I", this.getFlag("codigoEIJob"));
					this.addLog("Orden de trabajo generada", "Orden de trabajo de inspección", links);
					msg.attachDocument("Orden de trabajo", orden);
					msg.setLabel("Inspeccionar " + incidencia.objetoActuacion.^label + " " +   this.^label);
				}
				onSetupJob(JobSetup js) {
					SetupDelegation :: configurarJob(js, this.shIncidencia as Incidencia);
				}
				
				onSetupJobComplete(String providerLabel,Date suggestedStartDate,Date suggestedEndDate,String observations,boolean urgent) {
					var Expediente expediente = this.getTarget();
					var encargo = EncargoCI :: createNew(expediente.coleccion);
					this.shEncargoCI = encargo;
					this.save;
					var codigo = 0;
					if(this.getFlag("codigoEIJob") != null) {
						codigo = Integer :: parseInt(this.getFlag("codigoEIJob")) + 1;
					}
					else {
						codigo = 1;
					}
					this.setFlag("codigoEIJob", String :: valueOf(codigo));
					AnexoWorkmap :: rellenarFichaEncargoJobCI(encargo, expediente, " I-", codigo, suggestedStartDate, suggestedEndDate, observations);
				}
				onFinished(JobResponse msg) {
					var encargo = this.shEncargoCI as EncargoCI;
					var inspeccionado = AnexoWorkmap::inspeccionarInternaJob(encargo , msg);
					var parteInterno = ptic :: Exportador :: doExportOf(encargo.ficha).toNewDocument;
					parteInterno.consolidate();
					var links = new ArrayList <MonetLink>;
					links.^add(parteInterno.toMonetLink);
					this.addLog("Parde de trabajo generado", "Parte de trabajo de inspección", links);					
																				
					var bloqueo = coordinacion :: procesos :: cori :: workmap :: Lock :: EsperandoPticInterna_ExitPticInterna;
					if (!inspeccionado){
						bloqueo = coordinacion :: procesos :: cori :: workmap :: Lock :: EsperandoPticInterna_ExitPticNoSolucionadoInterna;						
					}else{
						var incidencia = this.shIncidencia as Incidencia;
						AnexoWorkmap::cambiarEstadoIncidencia(incidencia,new Term(null, "Inspeccionada"));
						incidencia.setFechaInspeccion(encargo.ficha.fechaFinReal);
						incidencia.save();
						HechosIncidencia :: hechoIncidenciaInspeccionada(incidencia);
						coordinacion :: modulos :: utilidades :: SendMail :: sendNotification("El trabajo: " + this.getLabel() + " ha sido inspeccionado. La incidencia ha sido solucionada", this);
					}					 
					var incidencia = this.shIncidencia as Incidencia;
					asociarDocumentoPt(incidencia, parteInterno, "I", this.getFlag("codigoEIJob"));
					var Post post = Post.createRequest();
					post.setTitle("Ha llegado un trabajo de inspección desde un dispositivo mobile " + this.getLabel());
					post.setTitleLink(this.toMonetLink());
					post.setBody(this.getLabel());
					post.setBodyLink(this.toMonetLink());
					NewsService.postAndNotifyToAll(post);					
					doUnlock(bloqueo);										 
//MERGE
//					doUnlock(bloqueo);										 					
				}
			}
		}

		["mq5hzng"]
		provider ServicioVerificacionInterno {
			role = ref coordinacion.RoleCoordinador;
			internal {
				service = ref actividades.VerificacionInterna;
				request Otv {
					code = "otv";

					constructor(InsourcingRequest msg) {
						var tarea = this.getTask();
						var encargo = tarea.getShEncargoCV() as EncargoCV;
						var incidencia = tarea.getShIncidencia() as Incidencia;
						msg.setContent(tarea.^label + "Interna");
						msg.attachString("idtareapadre",tarea.id);
						msg.attachString("idencargocv",encargo.toLink.id);
						msg.attachString("idincidencia",incidencia.toLink.id);
						
						

						tarea.addLog("Orden de trabajo", "Orden de trabajo de verificación", null);
						tarea.save;
					}
				}
				onTerminate() {
					var tarea = this.getTask();
					tarea.addLog("Parte de trabajo", "Parte de trabajo de verificación", null);
					tarea.doUnlock(Lock :: EsperandoPtvInterna_ExitPtvInterna);
				}
			}
		}

		["mwo6cvg"]
		provider ServicioInspeccionInterno {
			role = ref coordinacion.RoleInspeccionInterna;
			internal {
				service = ref actividades.InspeccionInterna;
				request Otic {
					code = "otic";
					constructor(InsourcingRequest msg) {
						var tarea = this.getTask();
						msg.setContent(tarea.^label + "Interna");
						tarea.addLog("Orden de trabajo", "Orden de trabajo de inspección", null);
					}
				}
				onTerminate() {
					var tarea = this.getTask();
					tarea.addLog("Parte de trabajo", "Parte de trabajo de inspección", null);
					tarea.doUnlock(Lock :: EsperandoPtic_ExitPtic);
				}
			}
		}

		["mwgv3yg"]
		provider ServicioVerificacion {
			role = ref coordinacion.RoleVerificacion;
			external {
				request PeticionTerminarV {
					code = "terminar";
				}
				request Otv {
					code = "otv";
					constructor(ProviderRequest msg) {
						var tarea = this.getTask();
						var encargo = tarea.shEncargoCV as encargos.EncargoCV;
						var fichaEncargo = encargo.ficha;
						var orden = otv :: Exportador :: doExportOf(fichaEncargo).toNewDocument;
						orden.consolidate;
						fichaEncargo.setOt(orden.toLink);
						fichaEncargo.setFechaEnvioOT(new Date());
						fichaEncargo.save;
						var links = new ArrayList <MonetLink>;
						links.^add(orden.toMonetLink);
						tarea.addLog("Orden de trabajo", "Orden de trabajo de verificación", links);
						tarea.save();
						msg.attachDocument("otv", orden);
						var String encargoCodigo = fichaEncargo.codigo;
						msg.attachString("label", tarea.getLabel() + encargoCodigo.substring(9, encargoCodigo.^length));
						var incidencia = tarea.shIncidencia as coordinacion.incidencias.Incidencia;
						incidencia.estado = new Term(null, "Verificando");
						incidencia.fechaModificacion = new Date();
						var expediente = encargo.owner.owner as Expediente;
						var fichaExpediente = expediente.fichaExpedienteCorrectivo;
						fichaExpediente.estado = new Term(null, "Pendiente de verificación");
						incidencia.save;
						fichaExpediente.save;
						incidencia.setFlag("verificando","true");
						HechosIncidencia :: hechoIncidenciaTramitada(incidencia);
					}
				}
				response Ptv {
					code = "ptv";
					import(ProviderResponse msg) {
						var tarea = this.getTask();
						var encargo = tarea.shEncargoCV as encargos.EncargoCV;
						var fichaEncargo = encargo.ficha;
						var parte = msg.getDocument("ptv", typeof(coordinacion.procesos.cori.documentos.Ptv)) as coordinacion.procesos.cori.documentos.Ptv;
						var links = new ArrayList <MonetLink>;
						links.^add(parte.toMonetLink);
						tarea.addLog("Parte de trabajo", "Parde de trabajo de verificación", links);
						ptv :: Importador :: doImportOf("ptv", msg).atScope(fichaEncargo);
						fichaEncargo.setPt(parte.toLink);
						fichaEncargo.setFechaRecepcionPT(new Date());
						fichaEncargo.save;
						var post = Post :: createRequest();
						post.setTitle("Ha llegado un parte de trabajo de verificación correctivo: " +tarea.^label);
						post.setTitleLink(tarea.toMonetLink());
						NewsService :: postAndNotifyToAll(post);
						var incidencia = tarea.shIncidencia as coordinacion.incidencias.Incidencia;
						incidencia.estado = new Term(null, "Verificada");
						incidencia.fechaModificacion = new Date();
						tarea.save();
						incidencia.save;
						var bloqueo = coordinacion :: procesos :: cori :: workmap :: Lock :: EsperandoPtv_ExitPtv;
						if(! fichaEncargo.resultado) {
							bloqueo = coordinacion :: procesos :: cori :: workmap :: Lock :: EsperandoPtv_ExitPtvNoVerificado;
						}
						else {
							var esquema = parte.^schema;
							incidencia.setFechaVerificacion(esquema.fechaFinReal);
							incidencia.save();
							HechosIncidencia :: hechoIncidenciaVerificada(incidencia);								
							coordinacion :: modulos :: utilidades :: SendMail :: sendNotification("El trabajo: " + tarea.getLabel() + " ha sido verificado. Se procede a tramitar el expediente", tarea);
						}
						tarea.doUnlock(bloqueo);
					}
				}
			}
		}

		["mubuzcw"]
		provider ServicioActuacion {
			role = ref coordinacion.RoleActuacionCorrectivo;
			external {
				request PeticionTerminarA {
					code = "terminar";
				}
				request Otac {
					code = "otac";
					constructor(ProviderRequest msg) {
						var tarea = this.getTask();
						var encargo = tarea.shEncargoCA as encargos.EncargoCA;
						var fichaEncargo = encargo.ficha;
						var orden = otac :: Exportador :: doExportOf(fichaEncargo).toNewDocument;
						orden.consolidate;
						fichaEncargo.setOt(orden.toLink);
						fichaEncargo.setFechaEnvioOT(new Date());
						fichaEncargo.save;
						var links = new ArrayList <MonetLink>;
						links.^add(orden.toMonetLink);
						tarea.addLog("Orden de trabajo", "Orden de trabajo de actuación", links);
						tarea.save();
						msg.attachDocument("otac", orden);
						var String encargoCodigo = fichaEncargo.codigo;
						msg.attachString("label", tarea.getLabel() + encargoCodigo.substring(9, encargoCodigo.^length));
						var incidencia = tarea.shIncidencia as coordinacion.incidencias.Incidencia;
						incidencia.estado = new Term(null, "Corrigiendo");
						incidencia.fechaModificacion = new Date();
						tarea.asociarDocumentoOt(incidencia, orden, "A", tarea.getFlag("codigoEA"));
//MERGE
//						incidencia.fechaEnvioOtac = new Date();
						var expediente = encargo.owner.owner as Expediente;
						var fichaExpediente = expediente.fichaExpedienteCorrectivo;
						fichaExpediente.estado = new Term(null, "Pendiente de resolución");
						incidencia.save;
						fichaExpediente.save;
						incidencia.setFlag("actuando","true");
						if (incidencia.getFlag("verificando") == null){
							HechosIncidencia :: hechoIncidenciaTramitada(incidencia);
						}
					}
				}
				response Ptac {
					code = "ptac";
					import(ProviderResponse msg) {
						var tarea = this.getTask();
						var encargo = tarea.shEncargoCA as encargos.EncargoCA;
						var fichaEncargo = encargo.ficha;
						var parte = msg.getDocument("ptac", typeof(coordinacion.procesos.cori.documentos.Ptac)) as coordinacion.procesos.cori.documentos.Ptac;
						fichaEncargo.setFechaRecepcionPT(new Date());
						fichaEncargo.setPt(parte.toLink);
						fichaEncargo.save;
						var links = new ArrayList <MonetLink>;
						links.^add(parte.toMonetLink);
						tarea.addLog("Parte de trabajo", "Parte de trabajo de actuación", links);
						ptac :: Importador :: doImportOf("ptac", msg).atScope(fichaEncargo);
						var post = Post :: createRequest();
						post.setTitle("Ha llegado una parte de trabajo de actuación correctiva: " + tarea.^label);
						post.setTitleLink(tarea.toMonetLink());
						NewsService :: postAndNotifyToAll(post);
						tarea.save();
						var incidencia = tarea.shIncidencia as coordinacion.incidencias.Incidencia;
						incidencia.estado = new Term("e005", "Ejecutada");
						incidencia.fechaModificacion = new Date();
						tarea.asociarDocumentoPt(incidencia, parte, "A", tarea.getFlag("codigoEA"));
						var expediente = encargo.owner.owner as Expediente;
						var fichaExpediente = expediente.fichaExpedienteCorrectivo;
						fichaExpediente.estado = new Term("corregida", "Ejecutado");
						incidencia.save;
						fichaExpediente.save;
						var bloqueo = coordinacion :: procesos :: cori :: workmap :: Lock :: EsperandoPtac_ExitPtac;
						if(! fichaEncargo.resultado) {
//MERGE
//							var esquema = parte.^schema;
//							incidencia.setFechaEjecucion(esquema.fechaFinReal);
							incidencia.setResultadoEjecucion("No corregida");
							incidencia.save();							
							bloqueo = coordinacion :: procesos :: cori :: workmap :: Lock :: EsperandoPtac_ExitPtacNoCorregido;
						}
						else {
							tarea.shParteIncidenciaCorregida = parte;
							tarea.save();
							if(Setup :: getVariable("SoloEjecucion") != null && Setup :: getVariable("SoloEjecucion").equals("true")) {
								bloqueo = coordinacion :: procesos :: cori :: workmap :: Lock :: EsperandoPtac_ExitPtacSoloEjecucion;
							}
							var esquema = parte.^schema;
							incidencia.setFechaEjecucion(esquema.fechaFinReal);
							incidencia.setResultadoEjecucion("Corregida");
							incidencia.save();
							HechosIncidencia :: hechoIncidenciaCorregida(incidencia);
							coordinacion :: modulos :: utilidades :: SendMail :: sendNotification("El trabajo: " + tarea.getLabel() + " ha sido corregido", tarea);
							HechosOperacionesCorrectivas::hechoOperacionRevisionCorrectivo(encargo);
						}
						tarea.doUnlock(bloqueo);
					}
				}
			}
		}

		["mnreyew"]
		provider ServicioInspeccion {
			role = ref coordinacion.RoleInspeccionCorrectivo;
			external {
				request PeticionTerminarI {
					code = "terminar";
				}
				request Otic {
					code = "otic";
					constructor(ProviderRequest msg) {
						var tarea = this.getTask();
						var encargo = tarea.shEncargoCI as encargos.EncargoCI;
						var fichaEncargo = encargo.ficha;
						var parte = tarea.shParteIncidenciaCorregida as documentos.Ptac;
						if (parte != null){
							fichaEncargo.getAdjuntosField().addNew();
							fichaEncargo.save();
						}
						var orden = otic :: Exportador :: doExportOf(fichaEncargo).toNewDocument;
						orden.consolidate;
						fichaEncargo.setFechaEnvioOT(new Date());
						fichaEncargo.setOt(orden.toLink);
						fichaEncargo.save;
						var links = new ArrayList <MonetLink>;
						links.^add(orden.toMonetLink);
						tarea.addLog("Orden de trabajo", "Orden de trabajo de inspección", links);
						tarea.save();
						msg.attachDocument("otic", orden);
						var String encargoCodigo = fichaEncargo.codigo;
						msg.attachString("label", tarea.getLabel() + encargoCodigo.substring(9, encargoCodigo.^length));
						var incidencia = tarea.shIncidencia as coordinacion.incidencias.Incidencia;
						incidencia.estado = new Term(null, "Inspeccionando");
						incidencia.fechaModificacion = new Date();
						var expediente = encargo.owner.owner as Expediente;
						var fichaExpediente = expediente.fichaExpedienteCorrectivo;
						fichaExpediente.estado = new Term(null, "Pendiente de inspección");
						incidencia.save;
						fichaExpediente.save;
					}
				}
				response Ptic {
					code = "ptic";
					import(ProviderResponse msg) {
						var tarea = this.getTask();
						var encargo = tarea.shEncargoCI as encargos.EncargoCI;
						var fichaEncargo = encargo.ficha;
						var parte = msg.getDocument("ptic", typeof(coordinacion.procesos.cori.documentos.Ptic)) as coordinacion.procesos.cori.documentos.Ptic;
						fichaEncargo.setFechaRecepcionPT(new Date());
						fichaEncargo.setPt(parte.toLink);
						fichaEncargo.save;
						var links = new ArrayList <MonetLink>;
						links.^add(parte.toMonetLink);
						tarea.addLog("Parte de trabajo", "Parte de trabajo de inspección", links);
						ptic :: Importador :: doImportOf("ptic", msg).atScope(fichaEncargo);
						var post = Post :: createRequest();
						post.setTitle("Ha llegado un parte de trabajo de inspección correctiva: " +tarea.^label);
						post.setTitleLink(tarea.toMonetLink());
						NewsService :: postAndNotifyToAll(post);
						tarea.save();
						var incidencia = tarea.shIncidencia as coordinacion.incidencias.Incidencia;
						incidencia.estado = new Term(null, "Inspeccionada");
						incidencia.fechaModificacion = new Date();
						incidencia.save;
						var bloqueo = coordinacion :: procesos :: cori :: workmap :: Lock :: EsperandoPtic_ExitPtic;
						if(! fichaEncargo.resultado) {
							bloqueo = coordinacion :: procesos :: cori :: workmap :: Lock :: EsperandoPtic_ExitPticNoSolucionado;
						}
						else {
							var esquema = parte.^schema;
							incidencia.setFechaInspeccion(esquema.fechaFinReal);
							incidencia.save();
							HechosIncidencia :: hechoIncidenciaInspeccionada(incidencia);								
							coordinacion :: modulos :: utilidades :: SendMail :: sendNotification("El trabajo: " + tarea.getLabel() + " ha sido inspeccionado. La incidencia ha sido solucionada", tarea);
						}
						tarea.doUnlock(bloqueo);
					}
				}
			}
		}

		["moewk7q"]
		place VolverEjecutar {

			["mwpymfq"]
			line {
				label = "Incidencia no corregida. ¿Volver a ejecutar?";

				["mjfvu8q"]
				stop Volver {
					label = "Volver a ejecutar con nuevas observaciones";
					goto = ref ConfiguracionIniciarActuacion;
					history = "Se ha vuelto a realizar un encargo de actuación";
				}

				["m2amnoa"]
				stop Cerrar {
					label = "Cerrar del expediente.";
					goto = ref CerrarExpediente;
					history = "Se ha procedido a cerrar el expediente";
				}
			}
		}

		["mwtjztq"]
		place AbortarExpediente {
			onArrive() {
				AnexoWorkmap :: abortarExpediente(this);
			}
		}

		function asociarDocumentoOt(Incidencia incidencia, coordinacion.procesos.cori.Otc orden, String tipo, String numero){
			var fecha = new Date("dd/MM/yyyy");
			var titulo = orden.getLabel() + " " + tipo;
			if (numero != null){
				titulo += "-" + numero;
			}
			titulo += " " + fecha.toString; 
			orden.setLabel(titulo);
			incidencia.documentosField.insert(0, orden.toLink);
			incidencia.save;
		}

		function asociarDocumentoPt(Incidencia incidencia, coordinacion.procesos.cori.Ptc parte, String tipo, String numero){
//MERGE
//					fichaEncargo.save;					
			var fecha = new Date("dd/MM/yyyy");
			var titulo = parte.getLabel() + " " + tipo;
			if (numero != null){
				titulo += "-" + numero;
			}
			titulo += " " + fecha.toString;
			parte.setLabel(titulo);
			incidencia.documentosField.insert(0, parte.toLink);
			incidencia.save;
		}
	}
}
  
