import coordinacion.modulos.utilidades.*

package coordinacion.procesos.ani {

	["mjagylq"]
	definition Workmap is service {
		ontology = "ServicioNotificacionIncidencias";
		label = "Atender notificaciones de incidencias";
		target = ref coordinacion.incidencias.Incidencia;
		shortcut shIncidencia;
		shortcut shNi;
		shortcut shParte;

		["mo8phya"]
		view {
			label = "Incidencia";
			show { 
				shortcut = "shIncidencia";
			}
		}

		["m2tbi2w"]
		view {
			label = "Notificación";
			show {
				shortcut = "shNi";
			}
		}

		["mbet1fa"]
		view {
			label = "Parte de trabajo";
			show {
				shortcut = "shParte";
			}
		}

		onAbort() {
			doGoto(Place :: Terminado, "Tarea abortada");
		}

		onInitialize() {
		}
		customer {
			request Ni {
				code = "ni";
				import(CustomerRequest msg) {
					var tarea = this.^task;
					var Ni ni = msg.getDocument("ni", typeof(Ni)) as Ni;
					tarea.shNi = ni;
					var ptac = msg.getDocument("ptac", typeof(coordinacion.procesos.cori.documentos.Ptac));
					if(ptac != null) {
						tarea.shParte = ptac;
					}
					var corregida = msg.getString("corregida");
					if(corregida != null) {
						tarea.setFlag("corregida", corregida);
					}
					var esMobile = msg.getString("mobile");
					if(esMobile != null) {
						tarea.setFlag("mobile", esMobile);
					}
					tarea.save;
					
					var post = Post :: createRequest();
					var esquemaNi = ni.^schema;
					var proveedor = esquemaNi.proveedor;
					var notificacion = "Notificación de incidencia: " + proveedor + " " + ni.^schema.tipoIncidenciaLabel + " " + ni.^schema.getObjetoActuacionLabel();
					post.setTitle(notificacion);
					post.setTitleLink(tarea.toMonetLink());
					post.setBody("¿Que desea hacer?");
					post.setBodyLink(tarea.toMonetLink());
					NewsService :: postAndNotifyToAll(post);
					var mensaje = "";
					tarea.setLabel("Notificación de incidencia: " + proveedor + " " + ni.^schema.tipoIncidenciaLabel + " " + ni.^schema.getObjetoActuacionLabel())
					tarea.save;					
					
					
					
				}
				goto = ref Estado; }
		}

		["mzzgwzg"]
		place Iniciado {
			is-initial;
		}

		["m8dwucg"]
		place Estado {
			onArrive() {
				if(this.getFlag("corregida") != null) {
					var esCorregida = this.getFlag("corregida");
					esCorregida = esCorregida.replaceAll("[\n\r]", "");
					if(esCorregida.equals("true")) {
						doGoto(Place :: Corregida, "Ha llegado una incidencia corregida");
						return;
					}
					else {
						doGoto(Place :: NoCorregida, "Ha llegado una incidencia no corregida");
						return;
					}
				}
				else {
					var esMobile = this.getFlag("mobile");
					if (esMobile != null){
						doGoto(Place :: RecibidoMobile, "Ha llegado una notificación de incidencia");
						return;
					}
					else {
					doGoto(Place :: Recibido, "Ha llegado una notificación de incidencia");
					return;
					}
				}
			}
		}

		["mxypy2q"]
		place NoCorregida {

			["m4z8kya"]
			line {
				label = "Se ha notificado una incidencia No corregida. ¿Que desea hacer?";

				["mfxjwpg"]
				stop StopCerrarExpediente {
					label = "Cerrar expediente";
					goto = ref CerrarExpediente;
					history = "Expediente cerrado";
				}

				["m_xfa9q"]
				stop StopTramitar {
					label = "Tramitar";
					goto = ref Tramitar;
					history = "Incidencia tramitada";
				}

				["mvzsgea"]
				stop StopIgnorar {
					label = "Eliminar notificación";
					goto = ref Terminado;
					history = "Notificación eliminada";
				}
			}
		}

		["mbyr4ma"]
		place Corregida {

			["mo4srpa"]
			line {
				label = "Se ha notificado una incidencia corregida. ¿Que desea hacer?";

				["mtljr8a"]
				stop StopCerrarExpediente {
					label = "Cerrar expediente";
					goto = ref CerrarExpediente;
					history = "Expediente cerrado";
				}

				["mspoykq"]
				stop StopTramitar {
					label = "Tramitar, volver a ejecutar o inspeccionar";
					goto = ref Tramitar;
					history = "Incidencia tramitada";
				}

				["m9tczug"]
				stop StopIgnorar {
					label = "Eliminar notificación";
					goto = ref Terminado;
					history = "Notificación eliminada";
				}
			}
		}

		["m1wqviw"]
		place Recibido {

			["m_0_ogq"]
			line {
				label = "Se ha notificado una nueva incidencia. ¿Desea tramitar?";

				["mo31s_w"]
				stop SiTramitar {
					label = "Si, deseo tramitar";
					goto = ref Tramitar;
					history = "Se ha decidido tramitar la incidencia";
				}

				["mwkxwfw"]
				stop Cerrar {
					label = "No, cerrar expediente";
					goto = ref CerrarExpediente;
					history = "Se ha decidido cerrar el expediente";
				}

				["m3ih9ew"]
				stop Ignorar {
					label = "No, eliminar notificación";
					goto = ref Terminado;
					history = "Se ha decidido eliminar la notificación";
				}
			}
		}

		["mi_nr3g"]
		place RecibidoMobile {

			["mvyz__q"]
			line {
				label = "Se ha notificado una nueva incidencia. ¿Desea tramitar?";

				["mgas78q"]
				stop SiTramitar {
					label = "Si, deseo tramitar";
					goto = ref TramitarMobile;
					history = "Se ha decidido tramitar la incidencia";
				}

				["mfqabxg"]
				stop Ignorar {
					label = "No, eliminar notificación";
					goto = ref Terminado;
					history = "Se ha decidido eliminar la notificación";
				}
			}
		}

		function ImportarIncidencia() : coordinacion.incidencias.Incidencia {
			var documentoNi = this.shNi as Ni;
			var incidencia = coordinacion :: incidencias :: Incidencia :: createNew(coordinacion :: incidencias :: Coleccion :: instance);
			ni :: Importador :: doImportOf(documentoNi).atScope(incidencia);
			return incidencia;
		}

		["mj2qfjg"]
		place Tramitar {
			onArrive() {
				var incidencia = ImportarIncidencia();
				incidencia.setFlag("tramitado", "true");
				if(this.getFlag("corregida") != null) {
					incidencia.setFlag("corregida", this.getFlag("corregida"));
				}
				tramitarIncidencia(incidencia);
				doGoto(Place :: Terminado, "Se ha iniciado el trámite de la incidencia");
			}
		}

		["mh0npva"]
		place TramitarMobile { 
			onArrive() {
				var incidencia = this.shIncidencia as coordinacion.incidencias.Incidencia;
				if (!esReintento(incidencia)){
					incidencia = ImportarIncidencia();
				}

				incidencia.setFlag("tramitado", "true");
				if(this.getFlag("corregida") != null) {
					incidencia.setFlag("corregida", this.getFlag("corregida"));
				}
				this.shIncidencia = incidencia;
				this.save;

				if (!faltanDatos(incidencia)){
					tramitarIncidencia(incidencia);
					doGoto(Place :: Terminado, "Se ha iniciado el trámite de la incidencia");
				}
				else{
					ClientService :: sendMessageToUser("Rellene los campos obligatorios de la incidencia");
					doGoto(Place :: RecibidoMobile, "Datos incompletos");
				}
			}
		}
		
		function esReintento(coordinacion.incidencias.Incidencia incidencia){
			return (incidencia != null);
		}

		function faltanDatos(coordinacion.incidencias.Incidencia incidencia){
			if (incidencia.objetoActuacion == null || incidencia.tipoIncidencia.empty){
				return true;
			}
			return false;
		}

		function tramitarIncidencia(coordinacion.incidencias.Incidencia incidencia) {
			var cori = coordinacion :: procesos :: cori :: Workmap :: createNew();
			if(this.getFlag("corregida") != null) {
				cori.setFlag("corregida", this.getFlag("corregida"));
				cori.shParteIncidenciaCorregida = this.shParte;
			}
			cori.shIncidencia = incidencia;
			cori.save;
			cori.resume;
		//	HechosIncidencia :: hechoIncidenciaTramitada(incidencia);
			var links = new ArrayList <MonetLink>;
			links.^add(cori.toMonetLink);
			this.addLog("Se ha generado un trámite", "Incidencia en trámite", links);
		}

		["mklny2w"]
		place CerrarExpediente {
			onArrive() {
				var incidencia = ImportarIncidencia();
				if(this.getFlag("corregida") != null) {
					incidencia.setFlag("corregida", this.getFlag("corregida"));
				}
				incidencia.setFlag("cerrada", "cerrada");
				tramitarIncidencia(incidencia);
				doGoto(Place :: Terminado, "Se creado una incidencia y ha sido cerrada");
			}
		}

		["m_minjq"]
		place Terminado {
			is-final;
		}

	}
}
  
